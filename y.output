Terminals unused in grammar

    LT
    LE
    GT
    GE
    EQ
    NE
    PLUS
    MINUS
    OR
    STAR
    SLASH
    DIV
    MOD
    AND
    FUNCTION_CALL
    ARRAY_ACCESS
    LIST
    RANGE


State 98 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: DEF ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    2 identifier_list: ID
    3                | identifier_list ',' ID

    4 declarations: declarations VAR identifier_list ':' type ';'
    5             | %empty

    6 type: standard_type
    7     | ARRAY '[' range ']' OF standard_type

    8 range: INUM '.' '.' INUM

    9 standard_type: INTEGRAL
   10              | RATIONAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | %empty

   13 subprogram_declaration: subprogram_header declarations subprogram_declarations compound_statement

   14 subprogram_header: FUNC ID arguments ':' standard_type ';'

   15 $@1: %empty

   16 subprogram_header: PROC ID $@1 arguments ';'

   17 arguments: '(' parameter_list ')'
   18          | %empty

   19 parameter_list: identifier_list ':' type
   20               | parameter_list ';' identifier_list ':' type

   21 compound_statement: BBEGIN optional_statements END

   22 optional_statements: statement_list
   23                    | %empty

   24 statement_list: statement
   25               | statement_list ';' statement

   26 statement: matched_statement
   27          | unmatched_statement

   28 matched_statement: IF expression THEN matched_statement ELSE matched_statement
   29                  | variable ASSIGNOP expression
   30                  | procedure_statement
   31                  | compound_statement
   32                  | WHILE expression DO statement
   33                  | REPEAT statement UNTIL expression
   34                  | FOR ID ASSIGNOP range DO statement

   35 unmatched_statement: IF expression THEN statement
   36                    | IF expression THEN matched_statement ELSE unmatched_statement

   37 variable: ID
   38         | ID '[' expression ']'

   39 procedure_statement: ID
   40                    | ID '(' expression_list ')'

   41 expression_list: expression
   42                | expression_list ',' expression

   43 expression: simple_expression
   44           | simple_expression RELOP simple_expression

   45 simple_expression: term
   46                  | ADDOP term
   47                  | simple_expression ADDOP term

   48 term: factor
   49     | term MULOP factor

   50 factor: ID
   51       | ID '(' expression_list ')'
   52       | ID '[' expression ']'
   53       | INUM
   54       | RNUM
   55       | '(' expression ')'
   56       | NOT factor


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 1 17 40 51 55
    ')' (41) 1 17 40 51 55
    ',' (44) 3 42
    '.' (46) 1 8
    ':' (58) 4 14 19 20
    ';' (59) 1 4 11 14 16 20 25
    '[' (91) 7 38 52
    ']' (93) 7 38 52
    error (256)
    DEF (258) 1
    VAR (259) 4
    ARRAY (260) 7
    OF (261) 7
    INTEGRAL (262) 9
    RATIONAL (263) 10
    BBEGIN (264) 21
    END (265) 21
    ASSIGNOP (266) 29 34
    FUNC (267) 14
    PROC (268) 16
    IF (269) 28 35 36
    THEN (270) 28 35 36
    ELSE (271) 28 36
    WHILE (272) 32
    DO (273) 32 34
    RELOP <opval> (274) 44
    LT (275)
    LE (276)
    GT (277)
    GE (278)
    EQ (279)
    NE (280)
    ADDOP <opval> (281) 46 47
    PLUS (282)
    MINUS (283)
    OR (284)
    MULOP <opval> (285) 49
    STAR (286)
    SLASH (287)
    DIV (288)
    MOD (289)
    AND (290)
    NOT (291) 56
    FUNCTION_CALL (292)
    ARRAY_ACCESS (293)
    LIST (294)
    RANGE (295)
    FOR (296) 34
    REPEAT (297) 33
    UNTIL (298) 33
    ID <sval> (299) 1 2 3 14 16 34 37 38 39 40 50 51 52
    INUM <ival> (300) 8 53
    RNUM <rval> (301) 54


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program (56)
        on left: 1
        on right: 0
    identifier_list <tval> (57)
        on left: 2 3
        on right: 1 3 4 19 20
    declarations (58)
        on left: 4 5
        on right: 1 4 13
    type <ival> (59)
        on left: 6 7
        on right: 4 19 20
    range <tval> (60)
        on left: 8
        on right: 7 34
    standard_type <ival> (61)
        on left: 9 10
        on right: 6 7 14
    subprogram_declarations (62)
        on left: 11 12
        on right: 1 11 13
    subprogram_declaration (63)
        on left: 13
        on right: 11
    subprogram_header (64)
        on left: 14 16
        on right: 13
    $@1 (65)
        on left: 15
        on right: 16
    arguments (66)
        on left: 17 18
        on right: 14 16
    parameter_list <tval> (67)
        on left: 19 20
        on right: 17 20
    compound_statement <tval> (68)
        on left: 21
        on right: 1 13 31
    optional_statements <tval> (69)
        on left: 22 23
        on right: 21
    statement_list <tval> (70)
        on left: 24 25
        on right: 22 25
    statement <tval> (71)
        on left: 26 27
        on right: 24 25 32 33 34 35
    matched_statement <tval> (72)
        on left: 28 29 30 31 32 33 34
        on right: 26 28 36
    unmatched_statement <tval> (73)
        on left: 35 36
        on right: 27 36
    variable <tval> (74)
        on left: 37 38
        on right: 29
    procedure_statement <tval> (75)
        on left: 39 40
        on right: 30
    expression_list <tval> (76)
        on left: 41 42
        on right: 40 42 51
    expression <tval> (77)
        on left: 43 44
        on right: 28 29 32 33 35 36 38 41 42 52 55
    simple_expression <tval> (78)
        on left: 45 46 47
        on right: 43 44 47
    term <tval> (79)
        on left: 48 49
        on right: 45 46 47 49
    factor <tval> (80)
        on left: 50 51 52 53 54 55 56
        on right: 48 49 56


State 0

    0 $accept: . program $end

    DEF  shift, and go to state 1

    program  go to state 2


State 1

    1 program: DEF . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: DEF ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: DEF ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    2 identifier_list: ID .

    $default  reduce using rule 2 (identifier_list)


State 7

    1 program: DEF ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    3 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    1 program: DEF ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 10


State 9

    3 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 11


State 10

    1 program: DEF ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 11

    3 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 3 (identifier_list)


State 12

    1 program: DEF ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    4 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 13

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 14


State 13

    4 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 15


State 14

    1 program: DEF ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    BBEGIN  shift, and go to state 16
    FUNC    shift, and go to state 17
    PROC    shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_header       go to state 20
    compound_statement      go to state 21


State 15

    3 identifier_list: identifier_list . ',' ID
    4 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 22


State 16

   21 compound_statement: BBEGIN . optional_statements END

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    FOR     shift, and go to state 25
    REPEAT  shift, and go to state 26
    ID      shift, and go to state 27

    $default  reduce using rule 23 (optional_statements)

    compound_statement   go to state 28
    optional_statements  go to state 29
    statement_list       go to state 30
    statement            go to state 31
    matched_statement    go to state 32
    unmatched_statement  go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


State 17

   14 subprogram_header: FUNC . ID arguments ':' standard_type ';'

    ID  shift, and go to state 36


State 18

   16 subprogram_header: PROC . ID $@1 arguments ';'

    ID  shift, and go to state 37


State 19

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 38


State 20

   13 subprogram_declaration: subprogram_header . declarations subprogram_declarations compound_statement

    $default  reduce using rule 5 (declarations)

    declarations  go to state 39


State 21

    1 program: DEF ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 40


State 22

    4 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY     shift, and go to state 41
    INTEGRAL  shift, and go to state 42
    RATIONAL  shift, and go to state 43

    type           go to state 44
    standard_type  go to state 45


State 23

   28 matched_statement: IF . expression THEN matched_statement ELSE matched_statement
   35 unmatched_statement: IF . expression THEN statement
   36                    | IF . expression THEN matched_statement ELSE unmatched_statement

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 52
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 24

   32 matched_statement: WHILE . expression DO statement

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 56
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 25

   34 matched_statement: FOR . ID ASSIGNOP range DO statement

    ID  shift, and go to state 57


State 26

   33 matched_statement: REPEAT . statement UNTIL expression

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    FOR     shift, and go to state 25
    REPEAT  shift, and go to state 26
    ID      shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 58
    matched_statement    go to state 32
    unmatched_statement  go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


State 27

   37 variable: ID .
   38         | ID . '[' expression ']'
   39 procedure_statement: ID .
   40                    | ID . '(' expression_list ')'

    '('  shift, and go to state 59
    '['  shift, and go to state 60

    ASSIGNOP  reduce using rule 37 (variable)
    $default  reduce using rule 39 (procedure_statement)


State 28

   31 matched_statement: compound_statement .

    $default  reduce using rule 31 (matched_statement)


State 29

   21 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 61


State 30

   22 optional_statements: statement_list .
   25 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 62

    $default  reduce using rule 22 (optional_statements)


State 31

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 32

   26 statement: matched_statement .

    $default  reduce using rule 26 (statement)


State 33

   27 statement: unmatched_statement .

    $default  reduce using rule 27 (statement)


State 34

   29 matched_statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 63


State 35

   30 matched_statement: procedure_statement .

    $default  reduce using rule 30 (matched_statement)


State 36

   14 subprogram_header: FUNC ID . arguments ':' standard_type ';'

    '('  shift, and go to state 64

    $default  reduce using rule 18 (arguments)

    arguments  go to state 65


State 37

   16 subprogram_header: PROC ID . $@1 arguments ';'

    $default  reduce using rule 15 ($@1)

    $@1  go to state 66


State 38

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


State 39

    4 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_header declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 13

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 67


State 40

    1 program: DEF ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 1 (program)


State 41

    7 type: ARRAY . '[' range ']' OF standard_type

    '['  shift, and go to state 68


State 42

    9 standard_type: INTEGRAL .

    $default  reduce using rule 9 (standard_type)


State 43

   10 standard_type: RATIONAL .

    $default  reduce using rule 10 (standard_type)


State 44

    4 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 69


State 45

    6 type: standard_type .

    $default  reduce using rule 6 (type)


State 46

   46 simple_expression: ADDOP . term

    NOT   shift, and go to state 47
    ID    shift, and go to state 48
    INUM  shift, and go to state 49
    RNUM  shift, and go to state 50
    '('   shift, and go to state 51

    term    go to state 70
    factor  go to state 55


State 47

   56 factor: NOT . factor

    NOT   shift, and go to state 47
    ID    shift, and go to state 48
    INUM  shift, and go to state 49
    RNUM  shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 71


State 48

   50 factor: ID .
   51       | ID . '(' expression_list ')'
   52       | ID . '[' expression ']'

    '('  shift, and go to state 72
    '['  shift, and go to state 73

    $default  reduce using rule 50 (factor)


State 49

   53 factor: INUM .

    $default  reduce using rule 53 (factor)


State 50

   54 factor: RNUM .

    $default  reduce using rule 54 (factor)


State 51

   55 factor: '(' . expression ')'

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 74
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 52

   28 matched_statement: IF expression . THEN matched_statement ELSE matched_statement
   35 unmatched_statement: IF expression . THEN statement
   36                    | IF expression . THEN matched_statement ELSE unmatched_statement

    THEN  shift, and go to state 75


State 53

   43 expression: simple_expression .
   44           | simple_expression . RELOP simple_expression
   47 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 76
    ADDOP  shift, and go to state 77

    $default  reduce using rule 43 (expression)


State 54

   45 simple_expression: term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 78

    $default  reduce using rule 45 (simple_expression)


State 55

   48 term: factor .

    $default  reduce using rule 48 (term)


State 56

   32 matched_statement: WHILE expression . DO statement

    DO  shift, and go to state 79


State 57

   34 matched_statement: FOR ID . ASSIGNOP range DO statement

    ASSIGNOP  shift, and go to state 80


State 58

   33 matched_statement: REPEAT statement . UNTIL expression

    UNTIL  shift, and go to state 81


State 59

   40 procedure_statement: ID '(' . expression_list ')'

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression_list    go to state 82
    expression         go to state 83
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 60

   38 variable: ID '[' . expression ']'

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 84
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 61

   21 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 21 (compound_statement)


State 62

   25 statement_list: statement_list ';' . statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    FOR     shift, and go to state 25
    REPEAT  shift, and go to state 26
    ID      shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 85
    matched_statement    go to state 32
    unmatched_statement  go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


State 63

   29 matched_statement: variable ASSIGNOP . expression

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 86
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 64

   17 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 87
    parameter_list   go to state 88


State 65

   14 subprogram_header: FUNC ID arguments . ':' standard_type ';'

    ':'  shift, and go to state 89


State 66

   16 subprogram_header: PROC ID $@1 . arguments ';'

    '('  shift, and go to state 64

    $default  reduce using rule 18 (arguments)

    arguments  go to state 90


State 67

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_header declarations subprogram_declarations . compound_statement

    BBEGIN  shift, and go to state 16
    FUNC    shift, and go to state 17
    PROC    shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_header       go to state 20
    compound_statement      go to state 91


State 68

    7 type: ARRAY '[' . range ']' OF standard_type

    INUM  shift, and go to state 92

    range  go to state 93


State 69

    4 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 4 (declarations)


State 70

   46 simple_expression: ADDOP term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 78

    $default  reduce using rule 46 (simple_expression)


State 71

   56 factor: NOT factor .

    $default  reduce using rule 56 (factor)


State 72

   51 factor: ID '(' . expression_list ')'

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression_list    go to state 94
    expression         go to state 83
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 73

   52 factor: ID '[' . expression ']'

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 95
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 74

   55 factor: '(' expression . ')'

    ')'  shift, and go to state 96


State 75

   28 matched_statement: IF expression THEN . matched_statement ELSE matched_statement
   35 unmatched_statement: IF expression THEN . statement
   36                    | IF expression THEN . matched_statement ELSE unmatched_statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    FOR     shift, and go to state 25
    REPEAT  shift, and go to state 26
    ID      shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 97
    matched_statement    go to state 98
    unmatched_statement  go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


State 76

   44 expression: simple_expression RELOP . simple_expression

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    simple_expression  go to state 99
    term               go to state 54
    factor             go to state 55


State 77

   47 simple_expression: simple_expression ADDOP . term

    NOT   shift, and go to state 47
    ID    shift, and go to state 48
    INUM  shift, and go to state 49
    RNUM  shift, and go to state 50
    '('   shift, and go to state 51

    term    go to state 100
    factor  go to state 55


State 78

   49 term: term MULOP . factor

    NOT   shift, and go to state 47
    ID    shift, and go to state 48
    INUM  shift, and go to state 49
    RNUM  shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 101


State 79

   32 matched_statement: WHILE expression DO . statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    FOR     shift, and go to state 25
    REPEAT  shift, and go to state 26
    ID      shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 102
    matched_statement    go to state 32
    unmatched_statement  go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


State 80

   34 matched_statement: FOR ID ASSIGNOP . range DO statement

    INUM  shift, and go to state 92

    range  go to state 103


State 81

   33 matched_statement: REPEAT statement UNTIL . expression

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 104
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 82

   40 procedure_statement: ID '(' expression_list . ')'
   42 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


State 83

   41 expression_list: expression .

    $default  reduce using rule 41 (expression_list)


State 84

   38 variable: ID '[' expression . ']'

    ']'  shift, and go to state 107


State 85

   25 statement_list: statement_list ';' statement .

    $default  reduce using rule 25 (statement_list)


State 86

   29 matched_statement: variable ASSIGNOP expression .

    $default  reduce using rule 29 (matched_statement)


State 87

    3 identifier_list: identifier_list . ',' ID
   19 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 108


State 88

   17 arguments: '(' parameter_list . ')'
   20 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 109
    ';'  shift, and go to state 110


State 89

   14 subprogram_header: FUNC ID arguments ':' . standard_type ';'

    INTEGRAL  shift, and go to state 42
    RATIONAL  shift, and go to state 43

    standard_type  go to state 111


State 90

   16 subprogram_header: PROC ID $@1 arguments . ';'

    ';'  shift, and go to state 112


State 91

   13 subprogram_declaration: subprogram_header declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 92

    8 range: INUM . '.' '.' INUM

    '.'  shift, and go to state 113


State 93

    7 type: ARRAY '[' range . ']' OF standard_type

    ']'  shift, and go to state 114


State 94

   42 expression_list: expression_list . ',' expression
   51 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 115
    ','  shift, and go to state 106


State 95

   52 factor: ID '[' expression . ']'

    ']'  shift, and go to state 116


State 96

   55 factor: '(' expression ')' .

    $default  reduce using rule 55 (factor)


State 97

   35 unmatched_statement: IF expression THEN statement .

    $default  reduce using rule 35 (unmatched_statement)


State 98

   26 statement: matched_statement .
   28 matched_statement: IF expression THEN matched_statement . ELSE matched_statement
   36 unmatched_statement: IF expression THEN matched_statement . ELSE unmatched_statement

    ELSE  shift, and go to state 117

    ELSE      [reduce using rule 26 (statement)]
    $default  reduce using rule 26 (statement)


State 99

   44 expression: simple_expression RELOP simple_expression .
   47 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 77

    $default  reduce using rule 44 (expression)


State 100

   47 simple_expression: simple_expression ADDOP term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 78

    $default  reduce using rule 47 (simple_expression)


State 101

   49 term: term MULOP factor .

    $default  reduce using rule 49 (term)


State 102

   32 matched_statement: WHILE expression DO statement .

    $default  reduce using rule 32 (matched_statement)


State 103

   34 matched_statement: FOR ID ASSIGNOP range . DO statement

    DO  shift, and go to state 118


State 104

   33 matched_statement: REPEAT statement UNTIL expression .

    $default  reduce using rule 33 (matched_statement)


State 105

   40 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 40 (procedure_statement)


State 106

   42 expression_list: expression_list ',' . expression

    ADDOP  shift, and go to state 46
    NOT    shift, and go to state 47
    ID     shift, and go to state 48
    INUM   shift, and go to state 49
    RNUM   shift, and go to state 50
    '('    shift, and go to state 51

    expression         go to state 119
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 107

   38 variable: ID '[' expression ']' .

    $default  reduce using rule 38 (variable)


State 108

   19 parameter_list: identifier_list ':' . type

    ARRAY     shift, and go to state 41
    INTEGRAL  shift, and go to state 42
    RATIONAL  shift, and go to state 43

    type           go to state 120
    standard_type  go to state 45


State 109

   17 arguments: '(' parameter_list ')' .

    $default  reduce using rule 17 (arguments)


State 110

   20 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 121


State 111

   14 subprogram_header: FUNC ID arguments ':' standard_type . ';'

    ';'  shift, and go to state 122


State 112

   16 subprogram_header: PROC ID $@1 arguments ';' .

    $default  reduce using rule 16 (subprogram_header)


State 113

    8 range: INUM '.' . '.' INUM

    '.'  shift, and go to state 123


State 114

    7 type: ARRAY '[' range ']' . OF standard_type

    OF  shift, and go to state 124


State 115

   51 factor: ID '(' expression_list ')' .

    $default  reduce using rule 51 (factor)


State 116

   52 factor: ID '[' expression ']' .

    $default  reduce using rule 52 (factor)


State 117

   28 matched_statement: IF expression THEN matched_statement ELSE . matched_statement
   36 unmatched_statement: IF expression THEN matched_statement ELSE . unmatched_statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    FOR     shift, and go to state 25
    REPEAT  shift, and go to state 26
    ID      shift, and go to state 27

    compound_statement   go to state 28
    matched_statement    go to state 125
    unmatched_statement  go to state 126
    variable             go to state 34
    procedure_statement  go to state 35


State 118

   34 matched_statement: FOR ID ASSIGNOP range DO . statement

    BBEGIN  shift, and go to state 16
    IF      shift, and go to state 23
    WHILE   shift, and go to state 24
    FOR     shift, and go to state 25
    REPEAT  shift, and go to state 26
    ID      shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 127
    matched_statement    go to state 32
    unmatched_statement  go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


State 119

   42 expression_list: expression_list ',' expression .

    $default  reduce using rule 42 (expression_list)


State 120

   19 parameter_list: identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 121

    3 identifier_list: identifier_list . ',' ID
   20 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 128


State 122

   14 subprogram_header: FUNC ID arguments ':' standard_type ';' .

    $default  reduce using rule 14 (subprogram_header)


State 123

    8 range: INUM '.' '.' . INUM

    INUM  shift, and go to state 129


State 124

    7 type: ARRAY '[' range ']' OF . standard_type

    INTEGRAL  shift, and go to state 42
    RATIONAL  shift, and go to state 43

    standard_type  go to state 130


State 125

   28 matched_statement: IF expression THEN matched_statement ELSE matched_statement .

    $default  reduce using rule 28 (matched_statement)


State 126

   36 unmatched_statement: IF expression THEN matched_statement ELSE unmatched_statement .

    $default  reduce using rule 36 (unmatched_statement)


State 127

   34 matched_statement: FOR ID ASSIGNOP range DO statement .

    $default  reduce using rule 34 (matched_statement)


State 128

   20 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY     shift, and go to state 41
    INTEGRAL  shift, and go to state 42
    RATIONAL  shift, and go to state 43

    type           go to state 131
    standard_type  go to state 45


State 129

    8 range: INUM '.' '.' INUM .

    $default  reduce using rule 8 (range)


State 130

    7 type: ARRAY '[' range ']' OF standard_type .

    $default  reduce using rule 7 (type)


State 131

   20 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)
