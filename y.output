Terminals unused in grammar

    LT
    LE
    GT
    GE
    EQ
    NE
    PLUS
    MINUS
    OR
    STAR
    SLASH
    DIV
    MOD
    AND
    FUNCTION_CALL
    ARRAY_ACCESS
    LIST
    RANGE


State 99 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: DEF ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' range ']' OF standard_type

    9 range: INUM '.' '.' INUM

   10 standard_type: INTEGRAL
   11              | RATIONAL

   12 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   13                        | %empty

   14 subprogram_declaration: subprogram_header declarations subprogram_declarations compound_statement

   15 subprogram_header: FUNC ID arguments ':' standard_type ';'

   16 $@2: %empty

   17 subprogram_header: PROC ID arguments ';' $@2 arguments ';'

   18 arguments: '(' parameter_list ')'
   19          | %empty

   20 parameter_list: identifier_list ':' type
   21               | parameter_list ';' identifier_list ':' type

   22 compound_statement: BBEGIN optional_statements END

   23 optional_statements: statement_list
   24                    | %empty

   25 statement_list: statement
   26               | statement_list ';' statement

   27 statement: matched_statement
   28          | unmatched_statement

   29 matched_statement: IF expression THEN matched_statement ELSE matched_statement
   30                  | variable ASSIGNOP expression
   31                  | procedure_statement
   32                  | compound_statement
   33                  | WHILE expression DO statement
   34                  | REPEAT statement UNTIL expression
   35                  | FOR ID ASSIGNOP range DO statement

   36 unmatched_statement: IF expression THEN statement
   37                    | IF expression THEN matched_statement ELSE unmatched_statement

   38 variable: ID
   39         | ID '[' expression ']'

   40 procedure_statement: ID
   41                    | ID '(' expression_list ')'

   42 expression_list: expression
   43                | expression_list ',' expression

   44 expression: simple_expression
   45           | simple_expression RELOP simple_expression

   46 simple_expression: term
   47                  | ADDOP term
   48                  | simple_expression ADDOP term

   49 term: factor
   50     | term MULOP factor

   51 factor: ID
   52       | ID '(' expression_list ')'
   53       | ID '[' expression ']'
   54       | INUM
   55       | RNUM
   56       | '(' expression ')'
   57       | NOT factor


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 2 18 41 52 56
    ')' (41) 2 18 41 52 56
    ',' (44) 4 43
    '.' (46) 2 9
    ':' (58) 5 15 20 21
    ';' (59) 2 5 12 15 17 21 26
    '[' (91) 8 39 53
    ']' (93) 8 39 53
    error (256)
    DEF (258) 2
    VAR (259) 5
    ARRAY (260) 8
    OF (261) 8
    INTEGRAL (262) 10
    RATIONAL (263) 11
    BBEGIN (264) 22
    END (265) 22
    ASSIGNOP (266) 30 35
    FUNC (267) 15
    PROC (268) 17
    IF (269) 29 36 37
    THEN (270) 29 36 37
    ELSE (271) 29 37
    WHILE (272) 33
    DO (273) 33 35
    RELOP <opval> (274) 45
    LT (275)
    LE (276)
    GT (277)
    GE (278)
    EQ (279)
    NE (280)
    ADDOP <opval> (281) 47 48
    PLUS (282)
    MINUS (283)
    OR (284)
    MULOP <opval> (285) 50
    STAR (286)
    SLASH (287)
    DIV (288)
    MOD (289)
    AND (290)
    NOT (291) 57
    FUNCTION_CALL (292)
    ARRAY_ACCESS (293)
    LIST (294)
    RANGE (295)
    FOR (296) 35
    REPEAT (297) 34
    UNTIL (298) 34
    ID <sval> (299) 2 3 4 15 17 35 38 39 40 41 51 52 53
    INUM <ival> (300) 9 54
    RNUM <rval> (301) 55


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program (56)
        on left: 2
        on right: 0
    $@1 (57)
        on left: 1
        on right: 2
    identifier_list <tval> (58)
        on left: 3 4
        on right: 2 4 5 20 21
    declarations (59)
        on left: 5 6
        on right: 2 5 14
    type <ival> (60)
        on left: 7 8
        on right: 5 20 21
    range <tval> (61)
        on left: 9
        on right: 8 35
    standard_type <ival> (62)
        on left: 10 11
        on right: 7 8 15
    subprogram_declarations (63)
        on left: 12 13
        on right: 2 12 14
    subprogram_declaration (64)
        on left: 14
        on right: 12
    subprogram_header (65)
        on left: 15 17
        on right: 14
    $@2 (66)
        on left: 16
        on right: 17
    arguments (67)
        on left: 18 19
        on right: 15 17
    parameter_list <tval> (68)
        on left: 20 21
        on right: 18 21
    compound_statement <tval> (69)
        on left: 22
        on right: 2 14 32
    optional_statements <tval> (70)
        on left: 23 24
        on right: 22
    statement_list <tval> (71)
        on left: 25 26
        on right: 23 26
    statement <tval> (72)
        on left: 27 28
        on right: 25 26 33 34 35 36
    matched_statement <tval> (73)
        on left: 29 30 31 32 33 34 35
        on right: 27 29 37
    unmatched_statement <tval> (74)
        on left: 36 37
        on right: 28 37
    variable <tval> (75)
        on left: 38 39
        on right: 30
    procedure_statement <tval> (76)
        on left: 40 41
        on right: 31
    expression_list <tval> (77)
        on left: 42 43
        on right: 41 43 52
    expression <tval> (78)
        on left: 44 45
        on right: 29 30 33 34 36 37 39 42 43 53 56
    simple_expression <tval> (79)
        on left: 46 47 48
        on right: 44 45 48
    term <tval> (80)
        on left: 49 50
        on right: 46 47 48 50
    factor <tval> (81)
        on left: 51 52 53 54 55 56 57
        on right: 49 50 57


State 0

    0 $accept: . program $end

    DEF  shift, and go to state 1

    program  go to state 2


State 1

    2 program: DEF . ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    2 program: DEF ID . '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    2 program: DEF ID '(' . identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 7

    2 program: DEF ID '(' identifier_list . ')' ';' $@1 declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    2 program: DEF ID '(' identifier_list ')' . ';' $@1 declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 10


State 9

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 11


State 10

    2 program: DEF ID '(' identifier_list ')' ';' . $@1 declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 1 ($@1)

    $@1  go to state 12


State 11

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 12

    2 program: DEF ID '(' identifier_list ')' ';' $@1 . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 13

    2 program: DEF ID '(' identifier_list ')' ';' $@1 declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 13 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 16


State 15

    2 program: DEF ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations . compound_statement '.'
   12 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    BBEGIN  shift, and go to state 17
    FUNC    shift, and go to state 18
    PROC    shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_header       go to state 21
    compound_statement      go to state 22


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 23


State 17

   22 compound_statement: BBEGIN . optional_statements END

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26
    REPEAT  shift, and go to state 27
    ID      shift, and go to state 28

    $default  reduce using rule 24 (optional_statements)

    compound_statement   go to state 29
    optional_statements  go to state 30
    statement_list       go to state 31
    statement            go to state 32
    matched_statement    go to state 33
    unmatched_statement  go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 18

   15 subprogram_header: FUNC . ID arguments ':' standard_type ';'

    ID  shift, and go to state 37


State 19

   17 subprogram_header: PROC . ID arguments ';' $@2 arguments ';'

    ID  shift, and go to state 38


State 20

   12 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 39


State 21

   14 subprogram_declaration: subprogram_header . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 40


State 22

    2 program: DEF ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 41


State 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY     shift, and go to state 42
    INTEGRAL  shift, and go to state 43
    RATIONAL  shift, and go to state 44

    type           go to state 45
    standard_type  go to state 46


State 24

   29 matched_statement: IF . expression THEN matched_statement ELSE matched_statement
   36 unmatched_statement: IF . expression THEN statement
   37                    | IF . expression THEN matched_statement ELSE unmatched_statement

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 53
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 25

   33 matched_statement: WHILE . expression DO statement

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 57
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 26

   35 matched_statement: FOR . ID ASSIGNOP range DO statement

    ID  shift, and go to state 58


State 27

   34 matched_statement: REPEAT . statement UNTIL expression

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26
    REPEAT  shift, and go to state 27
    ID      shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 59
    matched_statement    go to state 33
    unmatched_statement  go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 28

   38 variable: ID .
   39         | ID . '[' expression ']'
   40 procedure_statement: ID .
   41                    | ID . '(' expression_list ')'

    '('  shift, and go to state 60
    '['  shift, and go to state 61

    ASSIGNOP  reduce using rule 38 (variable)
    $default  reduce using rule 40 (procedure_statement)


State 29

   32 matched_statement: compound_statement .

    $default  reduce using rule 32 (matched_statement)


State 30

   22 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 62


State 31

   23 optional_statements: statement_list .
   26 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 63

    $default  reduce using rule 23 (optional_statements)


State 32

   25 statement_list: statement .

    $default  reduce using rule 25 (statement_list)


State 33

   27 statement: matched_statement .

    $default  reduce using rule 27 (statement)


State 34

   28 statement: unmatched_statement .

    $default  reduce using rule 28 (statement)


State 35

   30 matched_statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 64


State 36

   31 matched_statement: procedure_statement .

    $default  reduce using rule 31 (matched_statement)


State 37

   15 subprogram_header: FUNC ID . arguments ':' standard_type ';'

    '('  shift, and go to state 65

    $default  reduce using rule 19 (arguments)

    arguments  go to state 66


State 38

   17 subprogram_header: PROC ID . arguments ';' $@2 arguments ';'

    '('  shift, and go to state 65

    $default  reduce using rule 19 (arguments)

    arguments  go to state 67


State 39

   12 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 12 (subprogram_declarations)


State 40

    5 declarations: declarations . VAR identifier_list ':' type ';'
   14 subprogram_declaration: subprogram_header declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 13 (subprogram_declarations)

    subprogram_declarations  go to state 68


State 41

    2 program: DEF ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 42

    8 type: ARRAY . '[' range ']' OF standard_type

    '['  shift, and go to state 69


State 43

   10 standard_type: INTEGRAL .

    $default  reduce using rule 10 (standard_type)


State 44

   11 standard_type: RATIONAL .

    $default  reduce using rule 11 (standard_type)


State 45

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 70


State 46

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 47

   47 simple_expression: ADDOP . term

    NOT   shift, and go to state 48
    ID    shift, and go to state 49
    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    '('   shift, and go to state 52

    term    go to state 71
    factor  go to state 56


State 48

   57 factor: NOT . factor

    NOT   shift, and go to state 48
    ID    shift, and go to state 49
    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    '('   shift, and go to state 52

    factor  go to state 72


State 49

   51 factor: ID .
   52       | ID . '(' expression_list ')'
   53       | ID . '[' expression ']'

    '('  shift, and go to state 73
    '['  shift, and go to state 74

    $default  reduce using rule 51 (factor)


State 50

   54 factor: INUM .

    $default  reduce using rule 54 (factor)


State 51

   55 factor: RNUM .

    $default  reduce using rule 55 (factor)


State 52

   56 factor: '(' . expression ')'

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 75
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 53

   29 matched_statement: IF expression . THEN matched_statement ELSE matched_statement
   36 unmatched_statement: IF expression . THEN statement
   37                    | IF expression . THEN matched_statement ELSE unmatched_statement

    THEN  shift, and go to state 76


State 54

   44 expression: simple_expression .
   45           | simple_expression . RELOP simple_expression
   48 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 77
    ADDOP  shift, and go to state 78

    $default  reduce using rule 44 (expression)


State 55

   46 simple_expression: term .
   50 term: term . MULOP factor

    MULOP  shift, and go to state 79

    $default  reduce using rule 46 (simple_expression)


State 56

   49 term: factor .

    $default  reduce using rule 49 (term)


State 57

   33 matched_statement: WHILE expression . DO statement

    DO  shift, and go to state 80


State 58

   35 matched_statement: FOR ID . ASSIGNOP range DO statement

    ASSIGNOP  shift, and go to state 81


State 59

   34 matched_statement: REPEAT statement . UNTIL expression

    UNTIL  shift, and go to state 82


State 60

   41 procedure_statement: ID '(' . expression_list ')'

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression_list    go to state 83
    expression         go to state 84
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 61

   39 variable: ID '[' . expression ']'

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 85
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 62

   22 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 22 (compound_statement)


State 63

   26 statement_list: statement_list ';' . statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26
    REPEAT  shift, and go to state 27
    ID      shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 86
    matched_statement    go to state 33
    unmatched_statement  go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 64

   30 matched_statement: variable ASSIGNOP . expression

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 87
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 65

   18 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 88
    parameter_list   go to state 89


State 66

   15 subprogram_header: FUNC ID arguments . ':' standard_type ';'

    ':'  shift, and go to state 90


State 67

   17 subprogram_header: PROC ID arguments . ';' $@2 arguments ';'

    ';'  shift, and go to state 91


State 68

   12 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   14 subprogram_declaration: subprogram_header declarations subprogram_declarations . compound_statement

    BBEGIN  shift, and go to state 17
    FUNC    shift, and go to state 18
    PROC    shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_header       go to state 21
    compound_statement      go to state 92


State 69

    8 type: ARRAY '[' . range ']' OF standard_type

    INUM  shift, and go to state 93

    range  go to state 94


State 70

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 71

   47 simple_expression: ADDOP term .
   50 term: term . MULOP factor

    MULOP  shift, and go to state 79

    $default  reduce using rule 47 (simple_expression)


State 72

   57 factor: NOT factor .

    $default  reduce using rule 57 (factor)


State 73

   52 factor: ID '(' . expression_list ')'

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression_list    go to state 95
    expression         go to state 84
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 74

   53 factor: ID '[' . expression ']'

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 96
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 75

   56 factor: '(' expression . ')'

    ')'  shift, and go to state 97


State 76

   29 matched_statement: IF expression THEN . matched_statement ELSE matched_statement
   36 unmatched_statement: IF expression THEN . statement
   37                    | IF expression THEN . matched_statement ELSE unmatched_statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26
    REPEAT  shift, and go to state 27
    ID      shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 98
    matched_statement    go to state 99
    unmatched_statement  go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 77

   45 expression: simple_expression RELOP . simple_expression

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    simple_expression  go to state 100
    term               go to state 55
    factor             go to state 56


State 78

   48 simple_expression: simple_expression ADDOP . term

    NOT   shift, and go to state 48
    ID    shift, and go to state 49
    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    '('   shift, and go to state 52

    term    go to state 101
    factor  go to state 56


State 79

   50 term: term MULOP . factor

    NOT   shift, and go to state 48
    ID    shift, and go to state 49
    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    '('   shift, and go to state 52

    factor  go to state 102


State 80

   33 matched_statement: WHILE expression DO . statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26
    REPEAT  shift, and go to state 27
    ID      shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 103
    matched_statement    go to state 33
    unmatched_statement  go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 81

   35 matched_statement: FOR ID ASSIGNOP . range DO statement

    INUM  shift, and go to state 93

    range  go to state 104


State 82

   34 matched_statement: REPEAT statement UNTIL . expression

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 105
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 83

   41 procedure_statement: ID '(' expression_list . ')'
   43 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 106
    ','  shift, and go to state 107


State 84

   42 expression_list: expression .

    $default  reduce using rule 42 (expression_list)


State 85

   39 variable: ID '[' expression . ']'

    ']'  shift, and go to state 108


State 86

   26 statement_list: statement_list ';' statement .

    $default  reduce using rule 26 (statement_list)


State 87

   30 matched_statement: variable ASSIGNOP expression .

    $default  reduce using rule 30 (matched_statement)


State 88

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 109


State 89

   18 arguments: '(' parameter_list . ')'
   21 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 110
    ';'  shift, and go to state 111


State 90

   15 subprogram_header: FUNC ID arguments ':' . standard_type ';'

    INTEGRAL  shift, and go to state 43
    RATIONAL  shift, and go to state 44

    standard_type  go to state 112


State 91

   17 subprogram_header: PROC ID arguments ';' . $@2 arguments ';'

    $default  reduce using rule 16 ($@2)

    $@2  go to state 113


State 92

   14 subprogram_declaration: subprogram_header declarations subprogram_declarations compound_statement .

    $default  reduce using rule 14 (subprogram_declaration)


State 93

    9 range: INUM . '.' '.' INUM

    '.'  shift, and go to state 114


State 94

    8 type: ARRAY '[' range . ']' OF standard_type

    ']'  shift, and go to state 115


State 95

   43 expression_list: expression_list . ',' expression
   52 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 116
    ','  shift, and go to state 107


State 96

   53 factor: ID '[' expression . ']'

    ']'  shift, and go to state 117


State 97

   56 factor: '(' expression ')' .

    $default  reduce using rule 56 (factor)


State 98

   36 unmatched_statement: IF expression THEN statement .

    $default  reduce using rule 36 (unmatched_statement)


State 99

   27 statement: matched_statement .
   29 matched_statement: IF expression THEN matched_statement . ELSE matched_statement
   37 unmatched_statement: IF expression THEN matched_statement . ELSE unmatched_statement

    ELSE  shift, and go to state 118

    ELSE      [reduce using rule 27 (statement)]
    $default  reduce using rule 27 (statement)


State 100

   45 expression: simple_expression RELOP simple_expression .
   48 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 78

    $default  reduce using rule 45 (expression)


State 101

   48 simple_expression: simple_expression ADDOP term .
   50 term: term . MULOP factor

    MULOP  shift, and go to state 79

    $default  reduce using rule 48 (simple_expression)


State 102

   50 term: term MULOP factor .

    $default  reduce using rule 50 (term)


State 103

   33 matched_statement: WHILE expression DO statement .

    $default  reduce using rule 33 (matched_statement)


State 104

   35 matched_statement: FOR ID ASSIGNOP range . DO statement

    DO  shift, and go to state 119


State 105

   34 matched_statement: REPEAT statement UNTIL expression .

    $default  reduce using rule 34 (matched_statement)


State 106

   41 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 41 (procedure_statement)


State 107

   43 expression_list: expression_list ',' . expression

    ADDOP  shift, and go to state 47
    NOT    shift, and go to state 48
    ID     shift, and go to state 49
    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    '('    shift, and go to state 52

    expression         go to state 120
    simple_expression  go to state 54
    term               go to state 55
    factor             go to state 56


State 108

   39 variable: ID '[' expression ']' .

    $default  reduce using rule 39 (variable)


State 109

   20 parameter_list: identifier_list ':' . type

    ARRAY     shift, and go to state 42
    INTEGRAL  shift, and go to state 43
    RATIONAL  shift, and go to state 44

    type           go to state 121
    standard_type  go to state 46


State 110

   18 arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (arguments)


State 111

   21 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 122


State 112

   15 subprogram_header: FUNC ID arguments ':' standard_type . ';'

    ';'  shift, and go to state 123


State 113

   17 subprogram_header: PROC ID arguments ';' $@2 . arguments ';'

    '('  shift, and go to state 65

    $default  reduce using rule 19 (arguments)

    arguments  go to state 124


State 114

    9 range: INUM '.' . '.' INUM

    '.'  shift, and go to state 125


State 115

    8 type: ARRAY '[' range ']' . OF standard_type

    OF  shift, and go to state 126


State 116

   52 factor: ID '(' expression_list ')' .

    $default  reduce using rule 52 (factor)


State 117

   53 factor: ID '[' expression ']' .

    $default  reduce using rule 53 (factor)


State 118

   29 matched_statement: IF expression THEN matched_statement ELSE . matched_statement
   37 unmatched_statement: IF expression THEN matched_statement ELSE . unmatched_statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26
    REPEAT  shift, and go to state 27
    ID      shift, and go to state 28

    compound_statement   go to state 29
    matched_statement    go to state 127
    unmatched_statement  go to state 128
    variable             go to state 35
    procedure_statement  go to state 36


State 119

   35 matched_statement: FOR ID ASSIGNOP range DO . statement

    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26
    REPEAT  shift, and go to state 27
    ID      shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 129
    matched_statement    go to state 33
    unmatched_statement  go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 120

   43 expression_list: expression_list ',' expression .

    $default  reduce using rule 43 (expression_list)


State 121

   20 parameter_list: identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


State 122

    4 identifier_list: identifier_list . ',' ID
   21 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 130


State 123

   15 subprogram_header: FUNC ID arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_header)


State 124

   17 subprogram_header: PROC ID arguments ';' $@2 arguments . ';'

    ';'  shift, and go to state 131


State 125

    9 range: INUM '.' '.' . INUM

    INUM  shift, and go to state 132


State 126

    8 type: ARRAY '[' range ']' OF . standard_type

    INTEGRAL  shift, and go to state 43
    RATIONAL  shift, and go to state 44

    standard_type  go to state 133


State 127

   29 matched_statement: IF expression THEN matched_statement ELSE matched_statement .

    $default  reduce using rule 29 (matched_statement)


State 128

   37 unmatched_statement: IF expression THEN matched_statement ELSE unmatched_statement .

    $default  reduce using rule 37 (unmatched_statement)


State 129

   35 matched_statement: FOR ID ASSIGNOP range DO statement .

    $default  reduce using rule 35 (matched_statement)


State 130

   21 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY     shift, and go to state 42
    INTEGRAL  shift, and go to state 43
    RATIONAL  shift, and go to state 44

    type           go to state 134
    standard_type  go to state 46


State 131

   17 subprogram_header: PROC ID arguments ';' $@2 arguments ';' .

    $default  reduce using rule 17 (subprogram_header)


State 132

    9 range: INUM '.' '.' INUM .

    $default  reduce using rule 9 (range)


State 133

    8 type: ARRAY '[' range ']' OF standard_type .

    $default  reduce using rule 8 (type)


State 134

   21 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 21 (parameter_list)
